// Code generated by go-bindata.
// sources:
// static/list.html
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticListHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x51\x6b\xdb\x30\x10\x7e\xb6\x7f\xc5\x61\xe8\x5b\x6d\xa7\x94\xc1\xf0\x54\x43\x59\x19\xec\xa5\x0c\xb6\x3f\xa0\x44\x97\x58\x54\x96\x8c\xa4\x2e\x8d\x85\xff\xfb\x90\xe4\xb8\x4e\xea\x65\x5b\xf7\x94\xe8\xf4\xdd\xdd\xf7\xdd\x9d\xce\xa4\xb1\xad\xa8\xd3\x94\x34\x48\x59\x9d\x26\xc4\x72\x2b\xb0\x76\x0e\x8a\x6f\xd4\x36\x30\x0c\xa4\x8c\xa6\x34\x21\xc6\x1e\xc2\x9f\xc4\x3b\x5d\xa7\x49\xb2\x56\xec\x00\x2e\x4d\x92\xa4\x41\xbe\x6b\x6c\x05\x37\xab\xd5\xd5\x27\x6f\xd8\x73\x66\x9b\xd9\x79\xab\xa4\xcd\xb7\xb4\xe5\xe2\x50\xc1\x67\xf5\xac\x39\xea\x6b\x68\x95\x54\xa6\xa3\x1b\x0c\x98\x8e\x32\xc6\xe5\xae\x82\x55\x38\xb6\x54\xef\xb8\x1c\x4f\x43\x9a\x26\x09\x8d\xc9\x2c\xbe\xd8\x9c\xe1\x46\x69\x6a\xb9\x92\x15\x48\x25\x71\x02\x59\xba\x16\x18\x81\x53\xc0\x0f\x57\xd3\x75\xd1\x79\x5d\x6e\xe2\x14\x44\x55\xf0\x2c\x19\x6a\xc1\x67\x71\x0a\x49\x5b\x9c\x25\xa4\x82\xef\x64\x05\xda\x0b\x9d\xd3\xcd\x75\x94\x7e\xbb\xea\x5e\xce\x9c\x47\xbe\x7b\xa5\x59\xbe\xd7\xb4\xab\x60\xad\x91\x3e\xe5\xde\x10\x42\x30\x6e\x3a\x41\x0f\x15\x70\xe9\x73\xe7\x6b\xa1\x36\x4f\xf3\xfa\xdd\xae\x4e\xa2\x1a\xde\x2f\x50\x12\xb8\xb5\xaf\x18\xaa\x37\x0d\xff\x89\x73\x89\xbc\xc7\x0a\x56\xc5\x47\x6c\x23\x2c\x21\xe5\xd8\x4b\x52\xc6\xc6\xa7\xc4\xf7\x32\x0c\x80\x2f\x9f\x6f\x32\xb1\xda\xff\x24\xc4\x36\xb0\x11\xd4\x98\xbb\xcc\x8b\xca\xea\x47\xda\x22\x29\x6d\x73\x7e\xeb\xd3\x64\xf5\x77\xde\x4f\xb7\xa4\x8c\x31\x88\xd5\x47\xd0\x96\x0b\x04\x6e\xb1\xcd\x46\x77\x76\x1a\xdc\x1b\x13\x42\xa1\xd1\xb8\xbd\xcb\xca\xd9\x20\x66\x75\x41\x4a\x1a\xbd\x4a\xcb\xce\xdd\x63\xf6\xfc\x78\x75\x4c\xed\x1c\xdf\x82\x44\x1f\x45\xa3\xb4\x90\x65\xc3\xf0\x3f\x8c\x22\xa1\x10\x2a\x50\xfa\x67\x4e\xce\xa1\x64\xc3\x00\xce\x69\x2a\x77\x08\xc5\x17\x2e\xd0\xbc\x8b\x54\xd0\x56\xdc\x6f\x36\x68\x0c\x5f\x0b\x0c\x41\xde\x70\x0d\xc5\x8b\xd0\xaf\xe6\x81\xeb\x61\x28\x47\x0e\x59\x78\xe7\xbe\x9d\xe1\x9d\xd3\x1a\x9c\x43\x61\x30\xb0\x9b\x2e\x60\x44\x5f\x14\x09\x54\xd8\x98\xd0\xf7\xdf\x7b\xad\x0f\x16\xcd\x09\xd1\x31\x7b\x1e\x93\x80\xef\x8b\xb2\xa7\xfc\xf3\x23\x01\xe7\xc0\xaa\x30\xed\xc7\x80\x0b\x2c\xce\xea\xe9\x73\x3c\x3e\xb7\xbf\xad\xa7\xc9\x96\xe7\x79\xa4\x38\xf3\x05\x0f\x9f\x26\xe7\x68\x87\x9b\x61\x30\xa7\x34\x96\xdf\xc0\x6b\x31\x7e\x28\x4b\xc5\x72\x45\x26\x7d\x73\xcc\x3c\xec\xb2\xba\x07\xae\xdf\x2b\x2e\xba\x02\xe3\x7a\x2e\xcd\x5b\x2f\x29\xab\xff\xc0\xe9\x3e\xae\x9b\x73\x4e\xe3\x16\xba\xc4\x8a\xa9\xbd\x14\x8a\x32\xa0\x42\x00\x35\x8b\x89\x97\x57\x41\xd1\xf3\x2e\xab\x7b\xde\xf9\xa1\xbd\xbe\x80\xb3\x54\x67\xb5\xa5\xfa\x2f\x70\xc5\xae\x0f\xd0\x62\xd7\xcf\x9e\xf4\x1b\xd5\x7e\x77\x8e\x2b\x92\x94\x71\x67\xfa\x25\x1a\xbe\xa2\xbf\x02\x00\x00\xff\xff\x3e\x0d\x09\x67\x4d\x07\x00\x00")

func staticListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticListHtml,
		"static/list.html",
	)
}

func staticListHtml() (*asset, error) {
	bytes, err := staticListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/list.html", size: 1869, mode: os.FileMode(420), modTime: time.Unix(1545221879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/list.html": staticListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"list.html": &bintree{staticListHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

